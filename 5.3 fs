import mongoose from 'mongoose';

const variantSchema = new mongoose.Schema({
  color: String,
  size: String,
  stock: Number
});

const productSchema = new mongoose.Schema({
  name: String,
  price: Number,
  category: String,
  variants: [variantSchema]
});

export default mongoose.model('Product', productSchema);



import Product from '../models/product.js';

export const createProduct = async (req, res) => {
  try {
    const product = new Product(req.body);
    await product.save();
    res.status(201).json(product);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
};

export const getProducts = async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

export const getProductsByCategory = async (req, res) => {
  try {
    const products = await Product.find({ category: req.params.category });
    res.json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

export const getVariantDetails = async (req, res) => {
  try {
    const products = await Product.find({}, { name: 1, variants: 1 });
    res.json(products);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};




import express from 'express';
import { createProduct, getProducts, getProductsByCategory, getVariantDetails } from '../controllers/productController.js';

const router = express.Router();

router.post('/', createProduct);
router.get('/', getProducts);
router.get('/category/:category', getProductsByCategory);
router.get('/variants', getVariantDetails);

export default router;



import express from 'express';
import mongoose from 'mongoose';
import productRoutes from './routes/productRoutes.js';

const app = express();
app.use(express.json());

mongoose.connect('mongodb://127.0.0.1:27017/ecommerce', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error(err));

app.use('/products', productRoutes);

app.listen(3000, () => console.log('Server running on http://localhost:3000'));


